{"version":3,"sources":["web3.js","common/notifications/notifications.js","components/header/MetamaskConnection/MetamaskConnection.js","components/header/Header.js","components/forms/TransportForm.js","common/util-funcs/epoch-convert.js","components/lists/transports/TransportsList.js","common/constants/client-url.js","pages/transports/Transports.js","components/lists/cuts/CutsList.js","components/forms/CutForm.js","pages/cuts/Cuts.js","components/lists/cutters/CuttersList.js","components/forms/CutterForm.js","pages/cutters/Cutters.js","pages/home/Home.js","components/overviews/cut-overview/CutOverview.js","pages/cut-description/CutDescription.js","components/overviews/transport-overview/TransportOverview.js","pages/transport-description/TransportDescription.js","components/overviews/cutter-overview/CutterOverview.js","pages/cutter-description/CutterDescription.js","pages/cutter-dashboard/CutterDashboard.js","pages/car/Car.js","pages/not-found/NotFound.js","App.js","index.js","components/overviews/cutter-overview/CutterOverview.module.css","pages/transport-description/TransportDescription.module.css","pages/car/Car.module.css","pages/transports/Transports.module.css","pages/cuts/Cuts.module.css","pages/cutter-dashboard/CutterDashboard.module.css","pages/cutters/Cutters.module.css","pages/home/Home.module.css","components/header/Header.module.css","components/header/MetamaskConnection/MetamaskConnection.module.css","pages/not-found/NotFound.module.css","components/lists/cuts/CutsList.module.css","components/lists/transports/TransportsList.module.css","components/lists/cutters/CuttersList.module.css","components/overviews/transport-overview/TransportOverview.module.css","pages/cutter-description/CutterDescription.module.css","components/overviews/cut-overview/CutOverview.module.css","pages/cut-description/CutDescription.module.css"],"names":["web3","successNotification","content","Notification","type","header","closable","duration","errorNotification","error","reason","message","code","endIndex","search","substring","loadingNotification","txid","style","window","ethereum","isMetaMask","Web3","abiActorContract","require","abi","abiCuttingContract","abiTransportContract","actorContract","eth","Contract","cuttingContract","transportContract","getAccount","a","request","method","accounts","account","MetamaskConnection","useState","accountAddress","setAccountAddress","useEffect","connectButtonOnClick","on","LogoutPopover","address","ref","React","useRef","navigate","useNavigate","MenuPopover","forwardRef","onSelect","rest","Popover","full","Dropdown","Menu","Item","eventKey","Whisper","placement","controlId","trigger","speaker","event","current","close","Button","className","styles","btn","appearance","length","then","response","onClick","Header","isModalOpen","setIsModalOpen","formValue","setFormValue","isForester","setIsForester","checkIfForester","NavLink","props","Nav","as","Link","closeModal","registerForester","getAccounts","methods","send","from","gas","e","toaster","push","txHash","result","catch","foresters","call","resp","Navbar","Brand","to","pullRight","wallet","addForesterBtn","Modal","overflow","size","open","onClose","Title","Body","Form","fluid","onChange","Group","ControlLabel","Control","name","HelpText","Footer","isMobile","isEdge","TransportForm","reload","givenCif","givenCut","givenCuts","givenCar","openResultModal","cutHash","cif","nrTrees","car","model","Schema","Model","Types","StringType","isRequired","pattern","NumberType","range","rangeLength","createTransportContract","utils","asciiToHex","toUpperCase","events","TransportCreated","returnValues","transportHash","readOnly","data","block","accepter","SelectPicker","ButtonToolbar","convertEpochToDate","epoch","Date","parseInt","toUTCString","TransportsList","List","hover","bordered","list","transports","map","item","index","listItem","FlexboxGrid","colspan","centerList","flexDirection","alignItems","titleText","slimText","textAlign","dataText","hexToAscii","wordBreak","clientUrl","Transports","setTransports","searchedTransports","setSearchedTransports","transportsFetched","setTransportsFetched","isResultModalOpen","setIsResultModalOpen","resultHash","setResultHash","getTransports","getAllContractsCount","count","i","contractHashes","contractInfo","transport","trans","hash","departureTime","concat","pageTitle","addButton","value","InputGroup","inside","Input","placeholder","lowerCase","toLowerCase","filteredResults","filter","startsWith","Addon","Loader","backdrop","vertical","CutsList","cuts","flex","color","CutForm","closeFormModal","agreedNrTrees","location","parcel","createCuttingContract","CutCreated","Cuts","setCuts","searchedCuts","setSearchedCuts","cutsFetched","setCutsFetched","isFormModalOpen","setIsFormModalOpen","getCuts","contractHash","contract","companyInfo","info","cut","company","startTime","nrCutTrees","CuttersList","cutters","center","CutterForm","phone","walletAddress","registerCutter","Cutters","dataFetched","setDataFetched","setCutters","searchedCutters","setSearchedCutters","getCutters","getCompaniesCount","companiesCount","companies","cutter","Content","Home","inline","loop","Infinity","steps","onKeyDown","key","searchVal","target","CutOverview","cutInfo","Panel","bodyFill","panel","Grid","Row","addressRow","Col","md","infoRow","CutDescription","setCutInfo","cutInfoFetched","setCutInfoFetched","isCutOwnedByAccount","setIsCutOwnedByAccount","useParams","getCutInfo","tin","addressCompany","accountCif","getCuttingContractTransportHashesCount","cuttingContractTransportHashes","requestCut","href","qrcode","cutBtn","descriptionContent","transportsContent","descriptionTitle","addBtn","TransportOverview","transportInfo","TransportDescription","setTransportInfo","setCut","cutFetched","setCutFetched","getTransportInfo","getCut","CutterOverview","cutterInfo","CutterDescription","registrationTime","description","email","setCutterInfo","cutterInfoFetched","setCutterInfoFetched","contractsFetched","setContractsFetched","isCutModalOpen","setIsCutModalOpen","isTransportModalOpen","setIsTransportModalOpen","isCutResultModalOpen","setIsCutResultModalOpen","isTransportResultModalOpen","setIsTransportResultModalOpen","getCutterInfo","getAssociatedContracts","cifHex","closeCutModal","closeTransportModal","refreshTransports","getCompanyContractHashesCount","companyContractHashes","getCutTransports","getAllTransports","forEach","companyName","label","CutterDashboard","Car","carHex","getCarTransportHashesCount","carTransports","carNumberPlate","NotFound","App","CustomProvider","theme","basename","path","element","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.141dd4e8.chunk.js","sourcesContent":["import Web3 from \"web3\";\r\nlet web3;\r\nif (window.ethereum && window.ethereum.isMetaMask) {\r\n    web3 = new Web3(window.ethereum);\r\n}\r\nelse {\r\n    web3 = new Web3('https://ropsten.infura.io/v3/872068728e024a3485c78b9fc66020ca');\r\n}\r\n\r\nexport default web3;\r\n\r\nconst actorContractAddress = \"0xA0aE44CAE30482eD33C3C36651c0eB3C5991Ce91\";\r\nconst cuttingContractAddress = \"0x9b8a11063aAe16EEC72687DfFfa29bD6BE8b45F2\";\r\nconst transportationContractAddress = \"0xa6434512e68B993E20ACfd9479F7f49539E25115\";\r\n\r\nconst abiActorContract = require('./abi/ActorsRegistration.json').abi;\r\nconst abiCuttingContract = require('./abi/TreeCutting.json').abi;\r\nconst abiTransportContract = require('./abi/Transportation.json').abi;\r\n\r\nexport const actorContract = new web3.eth.Contract(abiActorContract, actorContractAddress);\r\nexport const cuttingContract = new web3.eth.Contract(abiCuttingContract, cuttingContractAddress);\r\nexport const transportContract = new web3.eth.Contract(abiTransportContract, transportationContractAddress);\r\n","import { Notification } from \"rsuite\";\r\n\r\nconst successNotification = (content) => {\r\n    return (\r\n        <Notification type='success' header='Transaction succeeded' closable duration={10000}>\r\n            <div>{content}</div>\r\n        </Notification>\r\n    );\r\n};\r\n\r\nconst errorNotification = (error) => {\r\n    var reason = error.message;\r\n\r\n    if (error.code == 4001) {\r\n        reason = 'User denied the transaction';\r\n    }\r\n    else {\r\n        const endIndex = error.message.search('{')\r\n        if (endIndex >= 0) {\r\n            reason = error.message.substring(0, endIndex)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Notification type='error' header='Transaction failed' closable duration={10000}>\r\n            <div>{reason}</div>\r\n        </Notification>\r\n    );\r\n};\r\n\r\nconst loadingNotification = (txid) => {\r\n    return (\r\n        <Notification type='info' header='Transaction initiated' closable duration={10000}>\r\n            <div style={{ 'wordWrap': 'break-word' }}>TXID: {txid}</div>\r\n        </Notification>\r\n    );\r\n};\r\n\r\nexport {\r\n    successNotification,\r\n    errorNotification,\r\n    loadingNotification\r\n}","import React, { useState, useEffect } from \"react\";\r\nimport styles from './MetamaskConnection.module.css';\r\nimport { Button, Popover, Whisper, Dropdown } from \"rsuite\";\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\nconst getAccount = async () => {\r\n    if (window.ethereum && window.ethereum.isMetaMask) {\r\n        const accounts = await window.ethereum.request({\r\n            method: \"eth_requestAccounts\",\r\n        });\r\n        const account = accounts[0];\r\n        return account;\r\n    }\r\n    else return '0x0000000000000000000000000000000000000000';\r\n}\r\n\r\nfunction MetamaskConnection() {\r\n\r\n    const [accountAddress, setAccountAddress] = useState(\"\");\r\n\r\n    useEffect(() => {\r\n        if (window.ethereum && window.ethereum.isMetaMask) {\r\n            connectButtonOnClick();\r\n\r\n            window.ethereum.on('accountsChanged', () => {\r\n                connectButtonOnClick();\r\n            });\r\n        }\r\n    }, []);\r\n\r\n    const LogoutPopover = ({ address }) => {\r\n\r\n        const ref = React.useRef();\r\n\r\n        let navigate = useNavigate();\r\n\r\n        const MenuPopover = React.forwardRef(({ onSelect, ...rest }, ref) => (\r\n            <Popover ref={ref} {...rest} full>\r\n                <Dropdown.Menu onSelect={onSelect}>\r\n                    <Dropdown.Item eventKey={1}>Dashboard</Dropdown.Item>\r\n                    <Dropdown.Item eventKey={2}>Disconnect</Dropdown.Item>\r\n                </Dropdown.Menu>\r\n            </Popover>\r\n        ));\r\n\r\n        function handleSelectMenu(eventKey, event) {\r\n            if (eventKey == 1) {\r\n                navigate(\"/dashboard/\" + address);\r\n            }\r\n            else if (eventKey == 2) {\r\n                setAccountAddress(\"\");\r\n            }\r\n\r\n            ref.current.close();\r\n        }\r\n\r\n        return (\r\n            <Whisper\r\n                placement=\"bottomEnd\"\r\n                controlId=\"control-id-with-dropdown\"\r\n                trigger=\"click\"\r\n                ref={ref}\r\n                speaker={<MenuPopover onSelect={handleSelectMenu} />}\r\n            >\r\n                <Button className={styles.btn} appearance=\"primary\">{address.substring(0, 5) + \"...\" + address.substring(address.length - 4)}</Button>\r\n            </Whisper>\r\n        );\r\n    }\r\n\r\n    const connectButtonOnClick = () => {\r\n        if (window.ethereum && window.ethereum.isMetaMask) {\r\n            getAccount().then(response => {\r\n                setAccountAddress(response);\r\n            });\r\n        }\r\n    };\r\n\r\n    return (\r\n        !!accountAddress ?\r\n            <LogoutPopover address={accountAddress} />\r\n            :\r\n            <Button className={styles.btn} appearance=\"primary\" onClick={connectButtonOnClick}>Connect wallet</Button>\r\n    );\r\n}\r\n\r\nexport default MetamaskConnection;\r\nexport { getAccount };\r\n","import React, { useState, useEffect } from 'react'\r\nimport { Button, Nav, Navbar, Modal, Form } from 'rsuite'\r\nimport styles from './Header.module.css';\r\nimport { Link } from 'react-router-dom';\r\nimport { successNotification, errorNotification, loadingNotification } from '../../common/notifications/notifications';\r\nimport { toaster } from 'rsuite';\r\nimport web3, { actorContract } from '../../web3';\r\nimport MetamaskConnection from './MetamaskConnection/MetamaskConnection';\r\nimport { getAccount } from './MetamaskConnection/MetamaskConnection';\r\nimport { isMobile, isEdge } from 'react-device-detect';\r\n\r\nconst Header = () => {\r\n\r\n    const [isModalOpen, setIsModalOpen] = useState(false);\r\n    const [formValue, setFormValue] = useState({\r\n        address: ''\r\n    });\r\n\r\n    const [isForester, setIsForester] = useState(false);\r\n\r\n    useEffect(() => {\r\n        checkIfForester();\r\n    }, []);\r\n\r\n    const NavLink = props => <Nav.Item as={Link} {...props} />\r\n\r\n    const submitForm = () => {\r\n        registerForester();\r\n        closeModal();\r\n    };\r\n\r\n    const openModal = () => {\r\n        setIsModalOpen(true);\r\n    };\r\n    const closeModal = () => {\r\n        setIsModalOpen(false);\r\n    };\r\n\r\n    const registerForester = async () => {\r\n        const accounts = await web3.eth.getAccounts();\r\n        actorContract.methods.registerForester(formValue.address).send({\r\n            from: accounts[0],\r\n            gas: 200000\r\n        }).on('error', (e) => {\r\n            toaster.push(errorNotification(e), { placement: 'bottomEnd' });\r\n        }).on('transactionHash', (txHash) => {\r\n            toaster.push(loadingNotification(txHash), { placement: 'bottomEnd' });\r\n        }).then((result) => {\r\n            toaster.push(successNotification('Forester registered'), { placement: 'bottomEnd' });\r\n        }).catch((e) => {\r\n            toaster.push(errorNotification(e), { placement: 'bottomEnd' });\r\n        });\r\n    };\r\n\r\n    const checkIfForester = () => {\r\n        if (window.ethereum) {\r\n            getAccount().then(account => {\r\n                actorContract.methods.foresters(account).call()\r\n                    .then(resp => {\r\n                        setIsForester(resp);\r\n                    });\r\n            });\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Navbar>\r\n            <Navbar.Brand as={Link} to=\"/\">\r\n                Tree Buddy\r\n            </Navbar.Brand>\r\n            <Nav>\r\n                <NavLink to=\"/transports\">Transports</NavLink>\r\n                <NavLink to=\"/cuts\">Cuts</NavLink>\r\n                <NavLink to=\"/cutters\">Cutters</NavLink>\r\n            </Nav>\r\n            <Nav pullRight className={styles.wallet}>\r\n                {isForester && <Button appearance='ghost' onClick={openModal} className={styles.addForesterBtn}>Add forester</Button>}\r\n                <Modal overflow={false} size='md' open={isModalOpen} onClose={closeModal}>\r\n                    <Modal.Header>\r\n                        <Modal.Title>Add forester</Modal.Title>\r\n                    </Modal.Header>\r\n                    <Modal.Body>\r\n                        <Form fluid onChange={setFormValue} formValue={formValue}>\r\n                            <Form.Group controlId=\"address-9\">\r\n                                <Form.ControlLabel>Ethereum wallet address</Form.ControlLabel>\r\n                                <Form.Control name=\"address\" />\r\n                                <Form.HelpText>Required</Form.HelpText>\r\n                            </Form.Group>\r\n                        </Form>\r\n                    </Modal.Body>\r\n                    <Modal.Footer>\r\n                        <Button onClick={submitForm} appearance=\"primary\">\r\n                            Confirm\r\n                        </Button>\r\n                        <Button onClick={closeModal} appearance=\"subtle\">\r\n                            Cancel\r\n                        </Button>\r\n                    </Modal.Footer>\r\n                </Modal>\r\n\r\n                {!isMobile && !isEdge && <MetamaskConnection />}\r\n            </Nav>\r\n        </Navbar>\r\n    )\r\n}\r\n\r\nexport default Header","import React, { useState } from 'react'\r\nimport web3, { transportContract } from '../../web3';\r\nimport { Button, ButtonToolbar, Form, toaster, SelectPicker, Schema } from 'rsuite';\r\nimport { successNotification, errorNotification, loadingNotification } from '../../common/notifications/notifications';\r\n\r\nconst TransportForm = ({ closeModal, reload, givenCif, givenCut, givenCuts, givenCar, openResultModal }) => {\r\n\r\n    const [formValue, setFormValue] = useState({\r\n        cutHash: givenCut,\r\n        cif: givenCif,\r\n        nrTrees: 0,\r\n        car: givenCar\r\n    });\r\n\r\n    const model = Schema.Model({\r\n        cutHash: Schema.Types.StringType()\r\n            .isRequired('This field is required')\r\n            .pattern(/^(0x[a-fA-F0-9]{64})$/, 'Please enter a valid cutting contract hash'),\r\n        nrTrees: Schema.Types.NumberType()\r\n            .isRequired('This field is required')\r\n            .range(0, 255, 'Please enter a number between 1 and 255'),\r\n        car: Schema.Types.StringType()\r\n            .isRequired('This field is required')\r\n            .rangeLength(7, 7, 'The car number plate can only have 7 characters'),\r\n    });\r\n\r\n    const submitForm = () => {\r\n        createTransportContract();\r\n        closeModal();\r\n        setFormValue({\r\n            cutHash: givenCut,\r\n            cif: givenCif,\r\n            nrTrees: 0,\r\n            car: ''\r\n        });\r\n    };\r\n\r\n    const createTransportContract = async () => {\r\n        const accounts = await web3.eth.getAccounts();\r\n\r\n        try {\r\n            await transportContract.methods.createTransportContract(formValue.nrTrees, web3.utils.asciiToHex(formValue.car.toUpperCase()), formValue.cutHash).call({\r\n                from: accounts[0]\r\n            });\r\n\r\n            transportContract.methods.createTransportContract(formValue.nrTrees, web3.utils.asciiToHex(formValue.car.toUpperCase()), formValue.cutHash).send({\r\n                from: accounts[0]\r\n            }).on('error', (e) => {\r\n                toaster.push(errorNotification(e), { placement: 'bottomEnd' });\r\n            }).on('transactionHash', (txHash) => {\r\n                toaster.push(loadingNotification(txHash), { placement: 'bottomEnd' });\r\n            }).then(result => {\r\n                toaster.push(successNotification('Transport contract created'), { placement: 'bottomEnd' });\r\n                reload();\r\n                openResultModal(result.events.TransportCreated.returnValues.transportHash);\r\n            });\r\n        }\r\n        catch (e) {\r\n            toaster.push(errorNotification(e), { placement: 'bottomEnd' });\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Form fluid onChange={setFormValue} formValue={formValue} model={model}>\r\n            <Form.Group controlId='cutHash-9'>\r\n                <Form.ControlLabel>Cutting contract hash</Form.ControlLabel>\r\n                {\r\n                    !!givenCut ?\r\n                        <Form.Control readOnly name=\"cutHash\" />\r\n                        :\r\n                        givenCuts.length ?\r\n                            <Form.Control name=\"cutHash\" data={givenCuts} block accepter={SelectPicker} />\r\n                            :\r\n                            <Form.Control name=\"cutHash\" />\r\n                }\r\n                <Form.HelpText>Required</Form.HelpText>\r\n            </Form.Group>\r\n            <Form.Group controlId=\"nrTrees-9\">\r\n                <Form.ControlLabel>Nr. trees</Form.ControlLabel>\r\n                <Form.Control name=\"nrTrees\" />\r\n                <Form.HelpText>Required</Form.HelpText>\r\n            </Form.Group>\r\n            <Form.Group controlId=\"car-9\">\r\n                <Form.ControlLabel>Vehicle number plate</Form.ControlLabel>\r\n                {\r\n                    !!givenCar ?\r\n                    <Form.Control name=\"car\" readOnly />\r\n                    :\r\n                    <Form.Control name=\"car\" />\r\n                }\r\n                <Form.HelpText>Required</Form.HelpText>\r\n            </Form.Group>\r\n            <Form.Group>\r\n                <ButtonToolbar style={{ 'float': 'right' }}>\r\n                    <Button appearance=\"primary\" onClick={submitForm}>Submit</Button>\r\n                    <Button appearance=\"subtle\" onClick={closeModal}>Cancel</Button>\r\n                </ButtonToolbar>\r\n            </Form.Group>\r\n        </Form>\r\n    )\r\n}\r\n\r\nexport default TransportForm","const convertEpochToDate = (epoch) => {\r\n    return new Date(parseInt(epoch) * 1000).toUTCString();\r\n};\r\n\r\nexport { convertEpochToDate };","import styles from './TransportsList.module.css';\r\nimport { List, FlexboxGrid } from 'rsuite';\r\nimport { BsCalendarDate } from \"react-icons/bs\";\r\nimport { useNavigate } from 'react-router-dom';\r\nimport web3 from '../../../web3';\r\nimport { convertEpochToDate } from '../../../common/util-funcs/epoch-convert';\r\n\r\nconst TransportsList = (props) => {\r\n\r\n    let navigate = useNavigate();\r\n\r\n    return (\r\n        <List hover bordered className={styles.list}>\r\n            {props.transports.map((item, index) => (\r\n                <List.Item className={styles.listItem} key={item['hash']} index={index + 1} onClick={() => { navigate(\"/transport/\" + item['hash']) }}>\r\n                    {/* hash, departure time, car */}\r\n                    <FlexboxGrid>\r\n                        <FlexboxGrid.Item colspan={6} className={styles.centerList} style={{ flexDirection: 'column', alignItems: 'flex-start', overflow: 'hidden' }}>\r\n                            <div className={styles.titleText}>{item['hash'].substring(0, 4) + '...' + item['hash'].substring(item['hash'].length - 4)}</div>\r\n                            <div className={styles.slimText}>\r\n                                <div>\r\n                                    <BsCalendarDate />\r\n                                    {' ' + convertEpochToDate(item['departureTime'])}\r\n                                </div>\r\n                            </div>\r\n                        </FlexboxGrid.Item>\r\n\r\n                        {/* car */}\r\n                        <FlexboxGrid.Item colspan={6} className={styles.centerList}>\r\n                            <div style={{ textAlign: 'right' }}>\r\n                                <div className={styles.slimText}>Vehicle nr. plate</div>\r\n                                <div className={styles.dataText}>{web3.utils.hexToAscii(item['car'])}</div>\r\n                            </div>\r\n                        </FlexboxGrid.Item>\r\n\r\n                        {/* transported trees */}\r\n                        <FlexboxGrid.Item colspan={6} className={styles.centerList}>\r\n                            <div style={{ textAlign: 'right' }}>\r\n                                <div className={styles.slimText}>Transported trees</div>\r\n                                <div className={styles.dataText}>{item['nrTrees']}</div>\r\n                            </div>\r\n                        </FlexboxGrid.Item>\r\n\r\n                        {/* cut hash */}\r\n                        <FlexboxGrid.Item colspan={6} className={styles.centerList}>\r\n                            <div style={{ textAlign: 'right' }}>\r\n                                <div className={styles.slimText}>Cutting contract</div>\r\n                                <div className={styles.dataText} style={{wordBreak: 'break-word'}}>{item['cutHash'].substring(0, 4) + '...' + item['cutHash'].substring(item['cutHash'].length - 4)}</div>\r\n                            </div>\r\n                        </FlexboxGrid.Item>\r\n                    </FlexboxGrid>\r\n                </List.Item>\r\n            ))}\r\n        </List>\r\n    )\r\n}\r\n\r\nexport default TransportsList","const clientUrl = \"https://treebuddy.herokuapp.com\";\r\n\r\nexport {\r\n    clientUrl\r\n}","import styles from './Transports.module.css'\r\nimport { Loader, Button, Modal, InputGroup, Input } from 'rsuite';\r\nimport Search from '@rsuite/icons/Search';\r\nimport { useState, useEffect } from 'react';\r\nimport { actorContract, transportContract} from '../../web3';\r\nimport TransportForm from '../../components/forms/TransportForm';\r\nimport TransportsList from '../../components/lists/transports/TransportsList';\r\nimport { QRCodeCanvas } from 'qrcode.react';\r\nimport { clientUrl } from '../../common/constants/client-url';\r\nimport { getAccount } from '../../components/header/MetamaskConnection/MetamaskConnection';\r\n\r\nconst Transports = () => {\r\n\r\n    const [transports, setTransports] = useState([]);\r\n    const [searchedTransports, setSearchedTransports] = useState([]);\r\n    const [transportsFetched, setTransportsFetched] = useState(false);\r\n\r\n    const [isModalOpen, setIsModalOpen] = useState(false);\r\n    const [isResultModalOpen, setIsResultModalOpen] = useState(false);\r\n\r\n    const [resultHash, setResultHash] = useState('');\r\n\r\n    const [isForester, setIsForester] = useState(false);\r\n\r\n    useEffect(() => {\r\n        getTransports();\r\n        checkIfForester();\r\n    }, []);\r\n\r\n    const openModal = () => {\r\n        setIsModalOpen(true);\r\n    };\r\n\r\n    const closeModal = () => {\r\n        setIsModalOpen(false);\r\n    };\r\n\r\n    const openResultModal = (hash) => {\r\n        setResultHash(hash);\r\n        setIsResultModalOpen(true);\r\n    };\r\n\r\n    const closeResultModal = () => {\r\n        setIsResultModalOpen(false);\r\n    };\r\n\r\n    const reload = () => {\r\n        setTransportsFetched(false);\r\n        setTransports([]);\r\n        setSearchedTransports([]);\r\n        getTransports();\r\n    }\r\n\r\n    const checkIfForester = () => {\r\n        getAccount().then(account => {\r\n            actorContract.methods.foresters(account).call()\r\n            .then(resp => {\r\n                setIsForester(resp);\r\n            });\r\n        });\r\n    };\r\n\r\n    const getTransports = () => {\r\n        transportContract.methods.getAllContractsCount().call()\r\n            .then(count => {\r\n                for (let i = 0; i < count; i++) {\r\n                    transportContract.methods.contractHashes(i).call()\r\n                        .then(transportHash => {\r\n                            transportContract.methods.contractInfo(transportHash).call()\r\n                                .then(transport => {\r\n                                    const trans = {\r\n                                        hash: transportHash,\r\n                                        nrTrees: transport[0],\r\n                                        car: transport[1],\r\n                                        cutHash: transport[2],\r\n                                        departureTime: transport[3]\r\n                                    };\r\n                                    setTransports(transports => transports.concat(trans));\r\n                                    setSearchedTransports(searchedTransports => searchedTransports.concat(trans));\r\n                                });\r\n                        });\r\n                }\r\n                setTransportsFetched(true);\r\n            });\r\n    };\r\n\r\n    const searchHandler = (value) => {\r\n        var lowerCase = value.toLowerCase();\r\n\r\n        if (lowerCase === '') {\r\n            setSearchedTransports(transports);\r\n        }\r\n        else {\r\n            const filteredResults = transports.filter((transport) => {\r\n                return transport.hash.startsWith(lowerCase);\r\n            });\r\n\r\n            setSearchedTransports(filteredResults);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <h2 className={styles.pageTitle}>Transportation contracts</h2>\r\n\r\n            <div className={styles.addButton}>\r\n                { isForester && <Button appearance='ghost' onClick={openModal}>+ Create transport contract</Button> }\r\n                <Modal overflow={false} size='md' open={isModalOpen} onClose={closeModal}>\r\n                    <Modal.Header>\r\n                        <Modal.Title>Create transport contract</Modal.Title>\r\n                    </Modal.Header>\r\n                    <Modal.Body>\r\n                        <TransportForm closeModal={closeModal} openResultModal={openResultModal} reload={reload} givenCif='' givenCut='' givenCuts={[]} givenCar='' />\r\n                    </Modal.Body>\r\n                    <Modal.Footer />\r\n                </Modal>\r\n\r\n                <Modal overflow={false} size='md' open={isResultModalOpen} onClose={closeResultModal}>\r\n                    <Modal.Header>\r\n                        <Modal.Title>Created transport contract</Modal.Title>\r\n                    </Modal.Header>\r\n                    <Modal.Body>\r\n                        <QRCodeCanvas value={clientUrl + '/transport/' + resultHash} className={styles.resultHash} />\r\n                        <p>Contract hash: {resultHash}</p>\r\n                        <p><i>Please make sure to screenshot the QR code!</i></p>\r\n                    </Modal.Body>\r\n                    <Modal.Footer />\r\n                </Modal>\r\n            </div>\r\n\r\n            <div className={styles.search}>\r\n                <InputGroup inside>\r\n                    <Input placeholder='Search for transport contract hash' onChange={searchHandler} />\r\n                    <InputGroup.Addon>\r\n                        <Search />\r\n                    </InputGroup.Addon>\r\n                </InputGroup>\r\n            </div>\r\n\r\n            <div className={styles.content}>\r\n                {\r\n                    transportsFetched ?\r\n                        <TransportsList transports={searchedTransports} />\r\n                        :\r\n                        <Loader size='lg' backdrop content=\"loading...\" vertical />\r\n                }\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Transports","import styles from './CutsList.module.css';\r\nimport { List, FlexboxGrid } from 'rsuite';\r\nimport { IoLocationOutline } from 'react-icons/io5';\r\nimport { BsCalendarDate } from \"react-icons/bs\";\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { convertEpochToDate } from '../../../common/util-funcs/epoch-convert';\r\n\r\nconst CutsList = (props) => {\r\n\r\n    let navigate = useNavigate();\r\n\r\n    return (\r\n        <List hover bordered className={styles.list}>\r\n            {props.cuts.map((item, index) => (\r\n                <List.Item className={styles.listItem} key={item['hash']} index={index + 1} onClick={() => { navigate(\"/cut/\" + item['hash']) }}>\r\n                    {/* hash, location & date */}\r\n                    <FlexboxGrid className={styles.flex}>\r\n                        <FlexboxGrid.Item colspan={6} className={styles.centerList} style={{ flexDirection: 'column', alignItems: 'flex-start', overflow: 'hidden' }}>\r\n                            <div className={styles.titleText}>{item['hash'].substring(0, 4) + '...' + item['hash'].substring(item['hash'].length - 4)}</div>\r\n                            <div className={styles.slimText}>\r\n                                <div>\r\n                                    <IoLocationOutline />\r\n                                    {' ' + item['location']}\r\n                                </div>\r\n                                <div>\r\n                                    <BsCalendarDate />\r\n                                    {' ' + convertEpochToDate(item['startTime'])}\r\n                                </div>\r\n                            </div>\r\n                        </FlexboxGrid.Item>\r\n\r\n                        {/* company */}\r\n                        <FlexboxGrid.Item colspan={6} className={styles.centerList}>\r\n                            <div style={{ textAlign: 'right' }}>\r\n                                <div className={styles.slimText}>Company</div>\r\n                                <div className={styles.dataText}>{item['company']}</div>\r\n                            </div>\r\n                        </FlexboxGrid.Item>\r\n\r\n                        {/* agreed trees */}\r\n                        <FlexboxGrid.Item colspan={6} className={styles.centerList}>\r\n                            <div style={{ textAlign: 'right' }}>\r\n                                <div className={styles.slimText}>Agreed nr. trees</div>\r\n                                <div className={styles.dataText}>{item['agreedNrTrees']}</div>\r\n                            </div>\r\n                        </FlexboxGrid.Item>\r\n\r\n                        {/* cut trees */}\r\n                        <FlexboxGrid.Item colspan={6} className={styles.centerList}>\r\n                            <div style={{ textAlign: 'right' }}>\r\n                                <div className={styles.slimText}>Cut nr. trees</div>\r\n                                <div className={styles.dataText}>\r\n                                    {item['nrCutTrees'] < item['agreedNrTrees'] ? <span style={{ color: '#429321' }}>{item['nrCutTrees']}</span> : <span>{item['nrCutTrees']}</span>}\r\n                                </div>\r\n                            </div>\r\n                        </FlexboxGrid.Item>\r\n                    </FlexboxGrid>\r\n                </List.Item>\r\n            ))}\r\n        </List>\r\n    )\r\n}\r\n\r\nexport default CutsList","import { useState } from 'react'\r\nimport web3, { cuttingContract } from '../../web3';\r\nimport { Button, ButtonToolbar, Form, Schema, toaster } from 'rsuite';\r\nimport { successNotification, errorNotification, loadingNotification } from '../../common/notifications/notifications';\r\n\r\nconst CutForm = ({ closeFormModal, reload, openResultModal, givenCif }) => {\r\n\r\n    const [formValue, setFormValue] = useState({\r\n        cif: givenCif,\r\n        agreedNrTrees: 0,\r\n        location: '',\r\n        parcel: 0\r\n    });\r\n\r\n    const model = Schema.Model({\r\n        cif: Schema.Types.StringType()\r\n            .isRequired('This field is required')\r\n            .pattern(/^([0-9]{8})$/, 'The CIF must be of 8 numbers'),\r\n        agreedNrTrees: Schema.Types.NumberType()\r\n            .isRequired('This field is required')\r\n            .range(0, 65535, 'Please enter a number between 1 and 65535'),\r\n        location: Schema.Types.StringType()\r\n            .isRequired('This field is required'),\r\n    });\r\n\r\n    const submitForm = () => {\r\n        createCuttingContract();\r\n        closeFormModal();\r\n        setFormValue({\r\n            cif: givenCif,\r\n            agreedNrTrees: 0,\r\n            location: '',\r\n            parcel: 0\r\n        });\r\n    }\r\n\r\n    const createCuttingContract = async () => {\r\n        const accounts = await web3.eth.getAccounts();\r\n\r\n        try {\r\n            await cuttingContract.methods.createCuttingContract(web3.utils.asciiToHex(formValue.cif), formValue.agreedNrTrees, formValue.location).call({\r\n                from: accounts[0]\r\n            });\r\n\r\n            cuttingContract.methods.createCuttingContract(web3.utils.asciiToHex(formValue.cif), formValue.agreedNrTrees, formValue.location).send({\r\n                from: accounts[0]\r\n            }).on('error', (e) => {\r\n                toaster.push(errorNotification(e), { placement: 'bottomEnd' });\r\n            }).on('transactionHash', (txHash) => {\r\n                toaster.push(loadingNotification(txHash), { placement: 'bottomEnd' });\r\n            }).then(result => {\r\n                toaster.push(successNotification('Cutting contract created'), { placement: 'bottomEnd' });\r\n                reload();\r\n                openResultModal(result.events.CutCreated.returnValues.cutHash);\r\n            });\r\n        }\r\n        catch (e) {\r\n            toaster.push(errorNotification(e), { placement: 'bottomEnd' });\r\n        }\r\n        \r\n    };\r\n\r\n    return (\r\n\r\n        <Form fluid onChange={setFormValue} formValue={formValue} model={model}>\r\n            <Form.Group controlId='cif-9'>\r\n                <Form.ControlLabel>TIN</Form.ControlLabel>\r\n                {\r\n                    !!givenCif ?\r\n                        <Form.Control readOnly name=\"cif\" />\r\n                        :\r\n                        <Form.Control name=\"cif\" />\r\n                }\r\n            </Form.Group>\r\n            <Form.Group controlId=\"agreedNrTrees-9\">\r\n                <Form.ControlLabel>Agreed nr. trees</Form.ControlLabel>\r\n                <Form.Control name=\"agreedNrTrees\" />\r\n                <Form.HelpText>Required</Form.HelpText>\r\n            </Form.Group>\r\n            <Form.Group controlId=\"location-9\">\r\n                <Form.ControlLabel>Location</Form.ControlLabel>\r\n                <Form.Control name=\"location\" />\r\n                <Form.HelpText>Required</Form.HelpText>\r\n            </Form.Group>\r\n            <Form.Group>\r\n                <ButtonToolbar style={{ 'float': 'right' }}>\r\n                    <Button appearance=\"primary\" onClick={submitForm}>Submit</Button>\r\n                    <Button appearance=\"subtle\" onClick={closeFormModal}>Cancel</Button>\r\n                </ButtonToolbar>\r\n            </Form.Group>\r\n        </Form>\r\n    )\r\n}\r\n\r\nexport default CutForm","import styles from './Cuts.module.css'\r\nimport { Modal, Button, Loader, Input } from 'rsuite';\r\nimport { InputGroup } from 'rsuite';\r\nimport Search from '@rsuite/icons/Search';\r\nimport CutsList from '../../components/lists/cuts/CutsList';\r\nimport { useState, useEffect } from 'react';\r\nimport CutForm from '../../components/forms/CutForm';\r\nimport { actorContract, cuttingContract } from '../../web3';\r\nimport { QRCodeCanvas } from 'qrcode.react';\r\nimport { clientUrl } from '../../common/constants/client-url';\r\nimport { getAccount } from '../../components/header/MetamaskConnection/MetamaskConnection';\r\n\r\nconst Cuts = () => {\r\n\r\n    const [cuts, setCuts] = useState([]);\r\n    const [searchedCuts, setSearchedCuts] = useState([]);\r\n    const [cutsFetched, setCutsFetched] = useState(false);\r\n\r\n    const [isFormModalOpen, setIsFormModalOpen] = useState(false);\r\n    const [isResultModalOpen, setIsResultModalOpen] = useState(false);\r\n\r\n    const [resultHash, setResultHash] = useState('');\r\n\r\n    const [isForester, setIsForester] = useState(false);\r\n\r\n    useEffect(() => {\r\n        getCuts();\r\n        checkIfForester();\r\n    }, [])\r\n\r\n    const openFormModal = () => {\r\n        setIsFormModalOpen(true);\r\n    };\r\n\r\n    const closeFormModal = () => {\r\n        setIsFormModalOpen(false);\r\n    };\r\n\r\n    const openResultModal = (hash) => {\r\n        setResultHash(hash);\r\n        setIsResultModalOpen(true);\r\n    };\r\n\r\n    const closeResultModal = () => {\r\n        setIsResultModalOpen(false);\r\n    };\r\n\r\n    const reload = () => {\r\n        setCutsFetched(false);\r\n        setCuts([]);\r\n        setSearchedCuts([]);\r\n        getCuts();\r\n    };\r\n\r\n    const checkIfForester = () => {\r\n        getAccount().then(account => {\r\n            actorContract.methods.foresters(account).call()\r\n            .then(resp => {\r\n                setIsForester(resp);\r\n            });\r\n        });\r\n    };\r\n\r\n    const getCuts = () => {\r\n        cuttingContract.methods.getAllContractsCount().call()\r\n            .then(count => {\r\n                for (let i = 0; i < count; i++) {\r\n                    cuttingContract.methods.contractHashes(i).call()\r\n                        .then(contractHash => {\r\n                            cuttingContract.methods.contractInfo(contractHash).call()\r\n                                .then(contract => {\r\n                                    actorContract.methods.companyInfo(contract[0]).call()\r\n                                        .then(info => {\r\n                                            const cut = {\r\n                                                hash: contractHash,\r\n                                                company: info.name,\r\n                                                agreedNrTrees: contract[1],\r\n                                                location: contract[2],\r\n                                                startTime: contract[3],\r\n                                                nrCutTrees: contract[4]\r\n                                            }\r\n                                            setCuts(cuts => cuts.concat(cut));\r\n                                            setSearchedCuts(searchedCuts => searchedCuts.concat(cut));\r\n                                        });\r\n                                });\r\n                        });\r\n                }\r\n                setCutsFetched(true);\r\n            });\r\n    };\r\n\r\n    const searchHandler = (value) => {\r\n        var lowerCase = value.toLowerCase();\r\n\r\n        if (lowerCase === '') {\r\n            setSearchedCuts(cuts);\r\n        }\r\n        else {\r\n            const filteredResults = cuts.filter((cut) => {\r\n                return cut.hash.startsWith(lowerCase) || cut.location.toLowerCase().startsWith(lowerCase);\r\n            });\r\n\r\n            setSearchedCuts(filteredResults);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <h2 className={styles.pageTitle}>Cutting contracts</h2>\r\n\r\n            <div className={styles.addButton}>\r\n                { isForester && <Button appearance='ghost' onClick={openFormModal}>+ Create cutting contract</Button> }\r\n                <Modal overflow={false} size='md' open={isFormModalOpen} onClose={closeFormModal}>\r\n                    <Modal.Header>\r\n                        <Modal.Title>Create cutting contract</Modal.Title>\r\n                    </Modal.Header>\r\n                    <Modal.Body>\r\n                        <CutForm closeFormModal={closeFormModal} reload={reload} openResultModal={openResultModal} givenCif='' />\r\n                    </Modal.Body>\r\n                    <Modal.Footer />\r\n                </Modal>\r\n\r\n                <Modal overflow={false} size='md' open={isResultModalOpen} onClose={closeResultModal}>\r\n                    <Modal.Header>\r\n                        <Modal.Title>Created cutting contract</Modal.Title>\r\n                    </Modal.Header>\r\n                    <Modal.Body>\r\n                        <QRCodeCanvas value={clientUrl + '/cut/' + resultHash} className={styles.resultHash} />\r\n                        <p>Contract hash: {resultHash}</p>\r\n                        <p><i>Please make sure to screenshot the QR code!</i></p>\r\n                    </Modal.Body>\r\n                    <Modal.Footer />\r\n                </Modal>\r\n            </div>\r\n\r\n            <div className={styles.search}>\r\n                <InputGroup inside>\r\n                    <Input placeholder='Search for cutting contract hash or location' onChange={searchHandler}/>\r\n                    <InputGroup.Addon>\r\n                        <Search />\r\n                    </InputGroup.Addon>\r\n                </InputGroup>\r\n            </div>\r\n\r\n            <div className={styles.content}>\r\n                {\r\n                    cutsFetched ?\r\n                        <CutsList cuts={searchedCuts} />\r\n                        :\r\n                        <Loader size='lg' backdrop content=\"loading...\" vertical />\r\n                }\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Cuts","import styles from './CuttersList.module.css';\r\nimport { List, FlexboxGrid } from 'rsuite';\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\nconst CuttersList = (props) => {\r\n\r\n  let navigate = useNavigate();\r\n\r\n  return (\r\n    <List hover bordered className={styles.list}>\r\n      {props.cutters.map((item, index) => (\r\n        <List.Item className={styles.listItem} key={item['cif']} index={index + 1} onClick={() => { navigate(\"/cutter/\" + item['cif']) }}>\r\n          {/* name, cif */}\r\n          <FlexboxGrid className={styles.flex}>\r\n            <FlexboxGrid.Item colspan={8} className={styles.center} style={{ flexDirection: 'column', alignItems: 'flex-start' }}>\r\n              <div className={styles.titleText}>{item['name']}</div>\r\n              <div className={styles.slimText}>\r\n                <div>\r\n                  {'TIN: ' + item['cif']}\r\n                </div>\r\n              </div>\r\n            </FlexboxGrid.Item>\r\n\r\n            {/* address */}\r\n            <FlexboxGrid.Item colspan={8} className={styles.center}>\r\n              <div style={{ textAlign: 'right' }}>\r\n                <div className={styles.slimText}>Wallet address</div>\r\n                <div className={styles.dataText}>{item['address'].substring(0, 5) + '...' + item['address'].substring(item['address'].length - 4)}</div>\r\n              </div>\r\n            </FlexboxGrid.Item>\r\n\r\n            {/* phone */}\r\n            <FlexboxGrid.Item colspan={8} className={styles.center}>\r\n              <div style={{ textAlign: 'right' }}>\r\n                <div className={styles.slimText}>Phone</div>\r\n                <div className={styles.dataText}>{item['phone']}</div>\r\n              </div>\r\n            </FlexboxGrid.Item>\r\n          </FlexboxGrid>\r\n        </List.Item>\r\n      ))}\r\n    </List>\r\n  )\r\n}\r\n\r\nexport default CuttersList","import React, { useState } from 'react';\r\nimport { Button, ButtonToolbar, Form, Schema, toaster } from 'rsuite';\r\nimport web3, { actorContract } from '../../web3';\r\nimport { successNotification, errorNotification, loadingNotification } from '../../common/notifications/notifications';\r\n\r\nconst CutterForm = ({ closeModal, reload }) => {\r\n\r\n    const [formValue, setFormValue] = useState({\r\n        cif: '',\r\n        name: '',\r\n        phone: '',\r\n        walletAddress: ''\r\n    });\r\n\r\n    const model = Schema.Model({\r\n        name: Schema.Types.StringType()\r\n            .isRequired('This field is required'),\r\n        cif: Schema.Types.StringType()\r\n            .isRequired('This field is required')\r\n            .pattern(/^([0-9]{8})$/, 'The CIF must be of 8 numbers'),\r\n        phone: Schema.Types.StringType()\r\n            .isRequired('This field is required')\r\n            .pattern(/^([0-9]{10})$/, 'The phone number must be of 10 numbers'),\r\n        walletAddress: Schema.Types.StringType()\r\n            .isRequired('This field is required')\r\n            .pattern(/^(0x[a-fA-F0-9]{40})$/, 'Please enter a valid ethereum address')\r\n    });\r\n\r\n    const submitForm = () => {\r\n        registerCutter();\r\n        closeModal();\r\n        setFormValue({\r\n            cif: '',\r\n            name: '',\r\n            phone: '',\r\n            walletAddress: ''\r\n        });\r\n    }\r\n\r\n    const registerCutter = async () => {\r\n        const accounts = await web3.eth.getAccounts();\r\n\r\n        try {\r\n            await actorContract.methods.registerCutter(web3.utils.asciiToHex(formValue.cif), formValue.name, web3.utils.asciiToHex(formValue.phone), formValue.walletAddress).call({\r\n                from: accounts[0]\r\n            });\r\n\r\n            actorContract.methods.registerCutter(web3.utils.asciiToHex(formValue.cif), formValue.name, web3.utils.asciiToHex(formValue.phone), formValue.walletAddress).send({\r\n                from: accounts[0]\r\n            }).on('error', (e) => {\r\n                toaster.push(errorNotification(e), { placement: 'bottomEnd' });\r\n            }).on('transactionHash', (txHash) => {\r\n                toaster.push(loadingNotification(txHash), { placement: 'bottomEnd' });\r\n            }).then(() => {\r\n                toaster.push(successNotification('Cutter company registered'), { placement: 'bottomEnd' });\r\n                reload();\r\n            });\r\n        }\r\n        catch (e) {\r\n            toaster.push(errorNotification(e), { placement: 'bottomEnd' });\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Form fluid onChange={setFormValue} formValue={formValue} model={model}>\r\n            <Form.Group controlId='name-9'>\r\n                <Form.ControlLabel>Company name</Form.ControlLabel>\r\n                <Form.Control name=\"name\" />\r\n                <Form.HelpText>Required</Form.HelpText>\r\n            </Form.Group>\r\n            <Form.Group controlId=\"cif-9\">\r\n                <Form.ControlLabel>TIN</Form.ControlLabel>\r\n                <Form.Control name=\"cif\" />\r\n                <Form.HelpText>Required</Form.HelpText>\r\n            </Form.Group>\r\n            <Form.Group controlId=\"phone-9\">\r\n                <Form.ControlLabel>Phone</Form.ControlLabel>\r\n                <Form.Control name=\"phone\" type=\"tel\" />\r\n                <Form.HelpText>Required</Form.HelpText>\r\n            </Form.Group>\r\n            <Form.Group controlId=\"walletAddress-9\">\r\n                <Form.ControlLabel>Ethereum wallet address</Form.ControlLabel>\r\n                <Form.Control name=\"walletAddress\" />\r\n                <Form.HelpText>Required</Form.HelpText>\r\n            </Form.Group>\r\n            <Form.Group>\r\n                <ButtonToolbar style={{ 'float': 'right' }}>\r\n                    <Button appearance=\"primary\" onClick={submitForm}>Submit</Button>\r\n                    <Button appearance=\"subtle\" onClick={closeModal}>Cancel</Button>\r\n                </ButtonToolbar>\r\n            </Form.Group>\r\n        </Form>\r\n    )\r\n}\r\n\r\nexport default CutterForm","import React, { useEffect, useState } from 'react';\r\nimport styles from './Cutters.module.css';\r\nimport { Content, Button, Modal, Loader } from 'rsuite';\r\nimport { InputGroup, Input } from 'rsuite';\r\nimport Search from '@rsuite/icons/Search';\r\nimport web3, { actorContract } from '../../web3';\r\nimport CuttersList from '../../components/lists/cutters/CuttersList';\r\nimport CutterForm from '../../components/forms/CutterForm';\r\nimport { getAccount } from '../../components/header/MetamaskConnection/MetamaskConnection';\r\n\r\nconst Cutters = () => {\r\n\r\n    const [dataFetched, setDataFetched] = useState(false);\r\n    const [cutters, setCutters] = useState([]);\r\n    const [isModalOpen, setIsModalOpen] = useState(false);\r\n    const [searchedCutters, setSearchedCutters] = useState([]);\r\n    const [isForester, setIsForester] = useState(false);\r\n\r\n    useEffect(() => {\r\n        getCutters();\r\n        checkIfForester();\r\n    }, []);\r\n\r\n    const openModal = () => {\r\n        setIsModalOpen(true);\r\n    };\r\n\r\n    const closeModal = () => {\r\n        setIsModalOpen(false);\r\n    };\r\n\r\n    const reload = () => {\r\n        setDataFetched(false);\r\n        setCutters([]);\r\n        setSearchedCutters([]);\r\n        getCutters();\r\n    };\r\n\r\n    const checkIfForester = () => {\r\n        getAccount().then(account => {\r\n            actorContract.methods.foresters(account).call()\r\n            .then(resp => {\r\n                setIsForester(resp);\r\n            });\r\n        });\r\n    };\r\n\r\n    const searchHandler = (value) => {\r\n        var lowerCase = value.toLowerCase();\r\n\r\n        if (lowerCase === '') {\r\n            setSearchedCutters(cutters);\r\n        }\r\n        else {\r\n            const filteredResults = cutters.filter((cutter) => {\r\n                return cutter.cif.startsWith(lowerCase) || cutter.name.toLowerCase().startsWith(lowerCase);;\r\n            });\r\n\r\n            setSearchedCutters(filteredResults);\r\n        }\r\n    };\r\n\r\n    const getCutters = () => {\r\n        actorContract.methods.getCompaniesCount().call()\r\n            .then(companiesCount => {\r\n                for (let i = 0; i < companiesCount; i++) {\r\n                    actorContract.methods.companies(i).call()\r\n                        .then(cif => {\r\n                            actorContract.methods.companyInfo(cif).call()\r\n                                .then(info => {\r\n                                    const cutter = {\r\n                                        cif: web3.utils.hexToAscii(cif),\r\n                                        name: info.name,\r\n                                        phone: web3.utils.hexToAscii(info.phone),\r\n                                        address: info.walletAddress\r\n                                    };\r\n                                    setCutters(cutters => cutters.concat(cutter))\r\n                                    setSearchedCutters(searchedCutters => searchedCutters.concat(cutter));\r\n                                });\r\n                        });\r\n                }\r\n                setDataFetched(true);\r\n            });\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <h2 className={styles.pageTitle}>Cutting companies</h2>\r\n\r\n            <div className={styles.addButton}>\r\n                { isForester && <Button appearance='ghost' onClick={openModal}>+ Add cutter company</Button> }\r\n                <Modal overflow={false} size='md' open={isModalOpen} onClose={closeModal}>\r\n                    <Modal.Header>\r\n                        <Modal.Title>Add cutter company</Modal.Title>\r\n                    </Modal.Header>\r\n                    <Modal.Body>\r\n                        <CutterForm closeModal={closeModal} reload={reload} />\r\n                    </Modal.Body>\r\n                    <Modal.Footer />\r\n                </Modal>\r\n            </div>\r\n\r\n            <div className={styles.search}>\r\n                <InputGroup inside>\r\n                    <Input placeholder='Search for cutting company name or TIN' onChange={searchHandler} />\r\n                    <InputGroup.Addon>\r\n                        <Search />\r\n                    </InputGroup.Addon>\r\n                </InputGroup>\r\n            </div>\r\n\r\n            <Content className={styles.content}>\r\n                {\r\n                    dataFetched ?\r\n                        <CuttersList cutters={searchedCutters} />\r\n                        :\r\n                        <Loader size='lg' backdrop content=\"loading...\" vertical />\r\n                }\r\n            </Content>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Cutters","import React from 'react'\r\nimport styles from './Home.module.css'\r\nimport Typical from 'react-typical'\r\nimport { Input, InputGroup } from 'rsuite'\r\nimport Search from '@rsuite/icons/Search'\r\nimport { useNavigate } from 'react-router-dom'\r\nimport { cuttingContract, transportContract } from '../../web3';\r\n\r\nconst Home = () => {\r\n    \r\n    let navigate = useNavigate();\r\n\r\n    const submitSearch = (e) => {\r\n        if (e.key === 'Enter') {\r\n            const searchVal = e.target.value;\r\n            if (searchVal.length === 7) {\r\n                navigate(\"/car/\" + searchVal.toUpperCase());\r\n                return;\r\n            }\r\n            else if (searchVal.length === 8) {\r\n                navigate(\"/cutter/\" + searchVal);\r\n                return;\r\n            }\r\n            else if (searchVal.length === 66) {\r\n                cuttingContract.methods.contractInfo(searchVal).call()\r\n                    .then(contract => {\r\n                        if (contract[0] != 0) {\r\n                            navigate(\"/cut/\" + searchVal);\r\n                            return;\r\n                        }\r\n                    });\r\n                transportContract.methods.contractInfo(searchVal).call()\r\n                    .then(contract => {\r\n                        if (contract[2] != 0) {\r\n                            navigate(\"/transport/\" + searchVal);\r\n                            return;\r\n                        }\r\n                    });\r\n            }\r\n            \r\n            navigate(\"/notfound\");\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className={styles.content}>\r\n            <div className={styles.center}>\r\n                <h1>The Forests' Dapp</h1>\r\n                <h4 className={styles.inline}>\r\n                    <Typical\r\n                        loop={Infinity}\r\n                        steps={[\r\n                            'Validate transports', 2000,\r\n                            'Check cutting & transport contracts', 2000,\r\n                            'Inspect cutting firms', 2000\r\n                        ]} />\r\n                </h4>\r\n                <p>In a trustworthy, immutable & decentralized form, using Ethereum blockchain</p>\r\n\r\n                <div className={styles.search}>\r\n                    <InputGroup inside>\r\n                        <Input placeholder='Search for cutter TIN, transport vehicle number plate, cutting or transport contract hash' onKeyDown={submitSearch} />\r\n                        <InputGroup.Addon>\r\n                            <Search />\r\n                        </InputGroup.Addon>\r\n                    </InputGroup>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Home","import styles from './CutOverview.module.css'\r\nimport { Grid, Row, Col, Panel } from 'rsuite'\r\nimport { convertEpochToDate } from '../../../common/util-funcs/epoch-convert'\r\n\r\nconst CutOverview = ({ cutInfo }) => {\r\n    return (\r\n        <Panel header='Cut overview' bordered bodyFill className={styles.panel}>\r\n            <Grid fluid>\r\n                <Row className={styles.addressRow}>\r\n                    <Col md={24}>\r\n                        <div className={styles.slimText}>Cut hash</div>\r\n                        <div style={{ wordBreak: 'break-word' }}>{cutInfo.hash}</div>\r\n                    </Col>\r\n                </Row>\r\n\r\n                <Row className={styles.addressRow}>\r\n                    <Col md={24}>\r\n                        <div className={styles.slimText}>Company</div>\r\n                        <div>{cutInfo.company}</div>\r\n                    </Col>\r\n                </Row>\r\n\r\n                <Row className={styles.infoRow}>\r\n                    <Col md={6}>\r\n                        <div className={styles.slimText}>Location</div>\r\n                        <div>{cutInfo.location}</div>\r\n                    </Col>\r\n                    <Col md={6}>\r\n                        <div className={styles.slimText}>Creation time</div>\r\n                        <div>{convertEpochToDate(cutInfo.startTime)}</div>\r\n                    </Col>\r\n                    <Col md={6} style={{ textAlign: 'right' }}>\r\n                        <div className={styles.slimText}>Agreed nr. trees</div>\r\n                        <div>{cutInfo.agreedNrTrees}</div>\r\n                    </Col>\r\n                    <Col md={6} style={{ textAlign: 'right' }}>\r\n                        <div className={styles.slimText}>Cut nr. trees</div>\r\n                        <div >{cutInfo.nrCutTrees}</div>\r\n                    </Col>\r\n                </Row>\r\n            </Grid>\r\n        </Panel>\r\n    )\r\n}\r\n\r\nexport default CutOverview","import styles from './CutDescription.module.css';\r\nimport { useParams } from 'react-router-dom';\r\nimport { QRCodeCanvas } from 'qrcode.react';\r\nimport web3, { actorContract, cuttingContract, transportContract } from '../../web3'\r\nimport CutOverview from '../../components/overviews/cut-overview/CutOverview';\r\nimport { useEffect, useState } from 'react';\r\nimport TransportsList from '../../components/lists/transports/TransportsList';\r\nimport { Button, Loader, Modal, toaster } from 'rsuite';\r\nimport { successNotification, errorNotification, loadingNotification } from '../../common/notifications/notifications';\r\nimport TransportForm from '../../components/forms/TransportForm';\r\nimport { getAccount } from '../../components/header/MetamaskConnection/MetamaskConnection';\r\nimport { clientUrl } from '../../common/constants/client-url';\r\n\r\nconst CutDescription = () => {\r\n\r\n    const [cutInfo, setCutInfo] = useState({\r\n        company: '',\r\n        agreedNrTrees: 0,\r\n        location: '',\r\n        startTime: 0,\r\n        nrCutTrees: 0,\r\n        hash: ''\r\n    });\r\n    const [transports, setTransports] = useState([]);\r\n\r\n    const [cutInfoFetched, setCutInfoFetched] = useState(false);\r\n    const [transportsFetched, setTransportsFetched] = useState(false);\r\n\r\n    const [isModalOpen, setIsModalOpen] = useState(false);\r\n    const [isResultModalOpen, setIsResultModalOpen] = useState(false);\r\n\r\n    const [resultHash, setResultHash] = useState('');\r\n\r\n    const [isCutOwnedByAccount, setIsCutOwnedByAccount] = useState(false);\r\n    const [isForester, setIsForester] = useState(false);\r\n\r\n    let { hash } = useParams();\r\n\r\n    useEffect(() => {\r\n        getCutInfo();\r\n        getTransports();\r\n        checkIfForester();\r\n    }, []);\r\n\r\n    const openModal = () => {\r\n        setIsModalOpen(true);\r\n    };\r\n\r\n    const closeModal = () => {\r\n        setIsModalOpen(false);\r\n    };\r\n\r\n    const openResultModal = (hash) => {\r\n        setResultHash(hash);\r\n        setIsResultModalOpen(true);\r\n    };\r\n\r\n    const closeResultModal = () => {\r\n        setIsResultModalOpen(false);\r\n    };\r\n\r\n    const reloadCutInfo = () => {\r\n        setCutInfoFetched(false);\r\n        getCutInfo();\r\n    }\r\n\r\n    const reloadTransports = () => {\r\n        setTransportsFetched(false);\r\n        setTransports([]);\r\n        getTransports();\r\n    };\r\n    \r\n    const checkIfForester = () => {\r\n        getAccount().then(account => {\r\n            actorContract.methods.foresters(account).call()\r\n            .then(resp => {\r\n                setIsForester(resp);\r\n            });\r\n        });\r\n    }\r\n\r\n    const getCutInfo = () => {\r\n        cuttingContract.methods.contractInfo(hash).call()\r\n            .then(cutInfo => {\r\n                actorContract.methods.companyInfo(cutInfo.tin).call()\r\n                    .then(info => {\r\n                        getAccount().then(account => {\r\n                            actorContract.methods.addressCompany(account).call()\r\n                                .then(accountCif => {\r\n                                    setIsCutOwnedByAccount(accountCif === cutInfo.tin);\r\n\r\n                                    setCutInfo({\r\n                                        company: info.name,\r\n                                        agreedNrTrees: cutInfo[1],\r\n                                        location: cutInfo[2],\r\n                                        startTime: cutInfo[3],\r\n                                        nrCutTrees: cutInfo[4],\r\n                                        hash: hash\r\n                                    });\r\n                                    setCutInfoFetched(true);\r\n                                });\r\n                        });\r\n                    });\r\n            });\r\n    };\r\n\r\n    const getTransports = () => {\r\n        transportContract.methods.getCuttingContractTransportHashesCount(hash).call()\r\n            .then(count => {\r\n                for (let i = 0; i < count; i++) {\r\n                    transportContract.methods.cuttingContractTransportHashes(hash, i).call()\r\n                        .then(transportHash => {\r\n                            transportContract.methods.contractInfo(transportHash).call()\r\n                                .then(transport => {\r\n                                    setTransports(transports => transports.concat({\r\n                                        hash: transportHash,\r\n                                        nrTrees: transport[0],\r\n                                        car: transport[1],\r\n                                        cutHash: transport[2],\r\n                                        departureTime: transport[3]\r\n                                    }));\r\n                                });\r\n                        });\r\n                }\r\n                setTransportsFetched(true);\r\n            });\r\n    };\r\n\r\n    const requestCut = async () => {\r\n        const accounts = await web3.eth.getAccounts();\r\n        cuttingContract.methods.cut(hash).send({\r\n            from: accounts[0]\r\n        }).on('error', (e) => {\r\n            toaster.push(errorNotification(e), { placement: 'bottomEnd' });\r\n        }).on('transactionHash', (txHash) => {\r\n            toaster.push(loadingNotification(txHash), { placement: 'bottomEnd' });\r\n        }).then(() => {\r\n            toaster.push(successNotification('Cut authorized'), { placement: 'bottomEnd' });\r\n            reloadCutInfo();\r\n        });\r\n    };\r\n\r\n    return (\r\n        <div className={styles.content}>\r\n            <div className={styles.center}>\r\n                <QRCodeCanvas value={window.location.href} className={styles.qrcode} />\r\n            </div>\r\n\r\n            {\r\n                cutInfoFetched ?\r\n                    isCutOwnedByAccount && <Button className={styles.cutBtn} appearance='ghost' onClick={requestCut}>+ Request cut</Button>\r\n                    :\r\n                    <Loader size='lg' backdrop content=\"loading...\" vertical />\r\n            }\r\n\r\n            <div className={styles.descriptionContent}>\r\n                {\r\n                    cutInfoFetched ?\r\n                        <CutOverview cutInfo={cutInfo} />\r\n                        :\r\n                        <Loader size='lg' backdrop content=\"loading...\" vertical />\r\n                }\r\n            </div>\r\n\r\n            <div className={styles.transportsContent}>\r\n                <div className={styles.descriptionTitle}>Associated transport contracts</div>\r\n                { isForester && <Button className={styles.addBtn} appearance='ghost' onClick={openModal}>+ Create transport contract</Button> }\r\n                <Modal overflow={false} size='md' open={isModalOpen} onClose={closeModal}>\r\n                    <Modal.Header>\r\n                        <Modal.Title>Create transport contract</Modal.Title>\r\n                    </Modal.Header>\r\n                    <Modal.Body>\r\n                        <TransportForm closeModal={closeModal} openResultModal={openResultModal} reload={reloadTransports} givenCif='' givenCar=''\r\n                            givenCuts={[]} givenCut={hash} />\r\n                    </Modal.Body>\r\n                    <Modal.Footer />\r\n                </Modal>\r\n\r\n                <Modal overflow={false} size='md' open={isResultModalOpen} onClose={closeResultModal}>\r\n                    <Modal.Header>\r\n                        <Modal.Title>Created transport contract</Modal.Title>\r\n                    </Modal.Header>\r\n                    <Modal.Body>\r\n                        <QRCodeCanvas value={clientUrl + '/transport/' + resultHash} className={styles.resultHash} />\r\n                        <p>Contract hash: {resultHash}</p>\r\n                        <p><i>Please make sure to screenshot the QR code!</i></p>\r\n                    </Modal.Body>\r\n                    <Modal.Footer />\r\n                </Modal>\r\n\r\n                {\r\n                    transportsFetched ?\r\n                        <TransportsList transports={transports} />\r\n                        :\r\n                        <Loader size='lg' backdrop content=\"loading...\" vertical />\r\n                }\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CutDescription","import styles from './TransportOverview.module.css';\r\nimport { Grid, Row, Col, Panel } from 'rsuite';\r\nimport { convertEpochToDate } from '../../../common/util-funcs/epoch-convert';\r\n\r\nconst TransportOverview = ({ transportInfo, company, location }) => {\r\n    return (\r\n        <Panel header='Transport overview' bordered bodyFill className={styles.panel}>\r\n            <Grid fluid>\r\n                <Row className={styles.addressRow}>\r\n                    <Col md={24}>\r\n                        <div className={styles.slimText}>Transport hash</div>\r\n                        <div style={{ wordBreak: 'break-word' }}>{transportInfo.hash}</div>\r\n                    </Col>\r\n                </Row>\r\n\r\n                <Row className={styles.addressRow}>\r\n                    <Col md={24}>\r\n                        <div className={styles.slimText}>Company</div>\r\n                        <div>{company}</div>\r\n                    </Col>\r\n                </Row>\r\n\r\n                <Row className={styles.addressRow}>\r\n                    <Col md={24}>\r\n                        <div className={styles.slimText}>Cut hash</div>\r\n                        <div style={{ wordBreak: 'break-word' }}>{transportInfo.cutHash}</div>\r\n                    </Col>\r\n                </Row>\r\n\r\n                <Row className={styles.infoRow}>\r\n                    <Col md={6}>\r\n                        <div className={styles.slimText}>Cut location</div>\r\n                        <div>{location}</div>\r\n                    </Col>\r\n                    <Col md={6}>\r\n                        <div className={styles.slimText}>Departure time</div>\r\n                        <div>{convertEpochToDate(transportInfo.departureTime)}</div>\r\n                    </Col>\r\n                    <Col md={6} style={{ textAlign: 'right' }}>\r\n                        <div className={styles.slimText}>Vehicle nr. plate</div>\r\n                        <div>{transportInfo.car}</div>\r\n                    </Col>\r\n                    <Col md={6} style={{ textAlign: 'right' }}>\r\n                        <div className={styles.slimText}>Nr. trees</div>\r\n                        <div>{transportInfo.nrTrees}</div>\r\n                    </Col>\r\n                </Row>\r\n            </Grid>\r\n        </Panel>\r\n    )\r\n}\r\n\r\nexport default TransportOverview","import styles from './TransportDescription.module.css';\r\nimport { useParams } from 'react-router-dom';\r\nimport { QRCodeCanvas } from 'qrcode.react';\r\nimport web3, { actorContract, cuttingContract, transportContract } from '../../web3'\r\nimport { useEffect, useState } from 'react';\r\nimport { Loader} from 'rsuite';\r\nimport TransportOverview from '../../components/overviews/transport-overview/TransportOverview';\r\nimport CutsList from '../../components/lists/cuts/CutsList';\r\n\r\nconst TransportDescription = () => {\r\n\r\n    const [transportInfo, setTransportInfo] = useState({\r\n        nrTrees: 0,\r\n        car: '',\r\n        cutHash: '',\r\n        departureTime: '',\r\n        hash: ''\r\n    });\r\n\r\n    const [cut, setCut] = useState([]);\r\n\r\n    const [cutFetched, setCutFetched] = useState(false);\r\n\r\n    let { hash } = useParams();\r\n\r\n    useEffect(() => {\r\n        getTransportInfo();\r\n    }, []);\r\n\r\n    const getTransportInfo = () => {\r\n        transportContract.methods.contractInfo(hash).call()\r\n            .then(transport => {\r\n                setTransportInfo({\r\n                    nrTrees: transport[0],\r\n                    car: web3.utils.hexToAscii(transport[1]),\r\n                    cutHash: transport[2],\r\n                    departureTime: transport[3],\r\n                    hash: hash\r\n                });\r\n\r\n                getCut(transport[2]);\r\n            });\r\n    };\r\n\r\n    const getCut = (cutHash) => {\r\n        cuttingContract.methods.contractInfo(cutHash).call()\r\n            .then(cut => {\r\n                actorContract.methods.companyInfo(cut[0]).call()\r\n                    .then(info => {\r\n                        setCut(cuts => cuts.concat({\r\n                            hash: cutHash,\r\n                            company: info.name,\r\n                            agreedNrTrees: cut[1],\r\n                            location: cut[2],\r\n                            startTime: cut[3],\r\n                            nrCutTrees: cut[4]\r\n                        }));\r\n                        setCutFetched(true);\r\n                    });\r\n            });\r\n    };\r\n\r\n    return (\r\n        <div className={styles.content}>\r\n            <div className={styles.center}>\r\n                <QRCodeCanvas value={window.location.href} className={styles.qrcode} />\r\n            </div>\r\n\r\n            <div className={styles.descriptionContent}>\r\n                {\r\n                    cutFetched ?\r\n                        <TransportOverview transportInfo={transportInfo} company={cut[0].company} location={cut[0].location} />\r\n                        :\r\n                        <Loader size='lg' backdrop content=\"loading...\" vertical />\r\n                }\r\n            </div>\r\n\r\n            <div className={styles.transportsContent}>\r\n                <div className={styles.descriptionTitle}>Associated cutting contract</div>\r\n\r\n                {\r\n                    cutFetched ?\r\n                        <CutsList cuts={cut} />\r\n                        :\r\n                        <Loader size='lg' backdrop content=\"loading...\" vertical />\r\n                }\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TransportDescription","import styles from './CutterOverview.module.css'\r\nimport { Grid, Row, Col, Panel } from 'rsuite'\r\n\r\nconst CutterOverview = ({ cutterInfo }) => {\r\n    return (\r\n        <Panel header='Cutter overview' bordered bodyFill className={styles.panel}>\r\n            <Grid fluid>\r\n                <Row className={styles.addressRow}>\r\n                    <Col md={24}>\r\n                        <div className={styles.slimText}>Wallet address</div>\r\n                        <div style={{ wordBreak: 'break-word' }}>{cutterInfo.walletAddress}</div>\r\n                    </Col>\r\n                </Row>\r\n\r\n                <Row className={styles.addressRow}>\r\n                    <Col md={24}>\r\n                        <div className={styles.slimText}>TIN</div>\r\n                        <div>{cutterInfo.cif}</div>\r\n                    </Col>\r\n                </Row>\r\n\r\n                <Row className={styles.infoRow}>\r\n                    <Col md={4}>\r\n                        <div className={styles.slimText}>Phone</div>\r\n                        <div>{cutterInfo.phone}</div>\r\n                    </Col>\r\n                </Row>\r\n            </Grid>\r\n        </Panel>\r\n    )\r\n}\r\n\r\nexport default CutterOverview","import styles from './CutterDescription.module.css';\r\nimport { useParams } from 'react-router-dom';\r\nimport { useEffect, useState } from 'react';\r\nimport web3, { actorContract, cuttingContract, transportContract } from '../../web3';\r\nimport CutsList from '../../components/lists/cuts/CutsList';\r\nimport TransportsList from '../../components/lists/transports/TransportsList';\r\nimport { Button, Loader, Modal } from 'rsuite';\r\nimport CutterOverview from '../../components/overviews/cutter-overview/CutterOverview';\r\nimport CutForm from '../../components/forms/CutForm';\r\nimport TransportForm from '../../components/forms/TransportForm';\r\nimport { QRCodeCanvas } from 'qrcode.react';\r\nimport { clientUrl } from '../../common/constants/client-url';\r\nimport { getAccount } from '../../components/header/MetamaskConnection/MetamaskConnection';\r\n\r\nconst CutterDescription = () => {\r\n\r\n    const [cutterInfo, setCutterInfo] = useState({\r\n        cif: '',\r\n        name: '',\r\n        registrationTime: '',\r\n        description: '',\r\n        location: '',\r\n        phone: '',\r\n        email: '',\r\n        walletAddress: ''\r\n    });\r\n    const [cuts, setCuts] = useState([]);\r\n    const [transports, setTransports] = useState([]);\r\n\r\n    const [cutterInfoFetched, setCutterInfoFetched] = useState(false);\r\n    const [contractsFetched, setContractsFetched] = useState(false);\r\n\r\n    const [isCutModalOpen, setIsCutModalOpen] = useState(false);\r\n    const [isTransportModalOpen, setIsTransportModalOpen] = useState(false);\r\n    const [isCutResultModalOpen, setIsCutResultModalOpen] = useState(false);\r\n    const [isTransportResultModalOpen, setIsTransportResultModalOpen] = useState(false);\r\n\r\n    const [resultHash, setResultHash] = useState('');\r\n\r\n    const [isForester, setIsForester] = useState(false);\r\n\r\n    useEffect(() => {\r\n        getCutterInfo();\r\n        getAssociatedContracts(true);\r\n        checkIfForester();\r\n    }, []);\r\n\r\n    let { cif } = useParams();\r\n    const cifHex = web3.utils.asciiToHex(cif);\r\n\r\n    const openCutModal = () => {\r\n        setIsCutModalOpen(true);\r\n    };\r\n    const closeCutModal = () => {\r\n        setIsCutModalOpen(false);\r\n    };\r\n\r\n    const openTransportModal = () => {\r\n        setIsTransportModalOpen(true);\r\n    };\r\n    const closeTransportModal = () => {\r\n        setIsTransportModalOpen(false);\r\n    };\r\n\r\n    const openCutResultModal = (hash) => {\r\n        setResultHash(hash);\r\n        setIsCutResultModalOpen(true);\r\n    };\r\n\r\n    const closeCutResultModal = () => {\r\n        setIsCutResultModalOpen(false);\r\n    };\r\n\r\n    const openTransportResultModal = (hash) => {\r\n        setResultHash(hash);\r\n        setIsTransportResultModalOpen(true);\r\n    };\r\n\r\n    const closeTransportResultModal = () => {\r\n        setIsTransportResultModalOpen(false);\r\n    };\r\n\r\n    const getCutterInfo = () => {\r\n        actorContract.methods.companyInfo(cifHex).call()\r\n            .then(info => {\r\n                setCutterInfo({\r\n                    cif: cif,\r\n                    name: info.name,\r\n                    phone: web3.utils.hexToAscii(info.phone),\r\n                    walletAddress: info.walletAddress\r\n                });\r\n                setCutterInfoFetched(true);\r\n            });\r\n    };\r\n\r\n    const reloadCuts = () => {\r\n        setContractsFetched(false);\r\n        setCuts([]);\r\n        getAssociatedContracts(false);\r\n    };\r\n    const reloadTransports = () => {\r\n        setContractsFetched(false);\r\n        setTransports([]);\r\n        getAllTransports();\r\n    };\r\n\r\n    const checkIfForester = () => {\r\n        getAccount().then(account => {\r\n            actorContract.methods.foresters(account).call()\r\n            .then(resp => {\r\n                setIsForester(resp);\r\n            });\r\n        });\r\n    };\r\n\r\n    const getAssociatedContracts = (refreshTransports) => {\r\n        cuttingContract.methods.getCompanyContractHashesCount(cifHex).call()\r\n            .then(count => {\r\n                for (let i = 0; i < count; i++) {\r\n                    cuttingContract.methods.companyContractHashes(cifHex, i).call()\r\n                        .then(contractHash => {\r\n                            cuttingContract.methods.contractInfo(contractHash).call()\r\n                                .then(contract => {\r\n                                    actorContract.methods.companyInfo(cifHex).call()\r\n                                        .then(info => {\r\n                                            setCuts(cuts => cuts.concat({\r\n                                                hash: contractHash,\r\n                                                company: info.name,\r\n                                                agreedNrTrees: contract[1],\r\n                                                location: contract[2],\r\n                                                startTime: contract[3],\r\n                                                nrCutTrees: contract[4]\r\n                                            }));\r\n\r\n                                            if (refreshTransports) {\r\n                                                getCutTransports(contractHash);\r\n                                            }\r\n                                            else {\r\n                                                setContractsFetched(true);\r\n                                            }\r\n                                        });\r\n                                });\r\n                        });\r\n                }\r\n                if (count == 0) {\r\n                    setContractsFetched(true);\r\n                }\r\n            });\r\n    };\r\n\r\n    const getCutTransports = (cutHash) => {\r\n        transportContract.methods.getCuttingContractTransportHashesCount(cutHash).call()\r\n            .then(count => {\r\n                for (let i = 0; i < count; i++) {\r\n                    transportContract.methods.cuttingContractTransportHashes(cutHash, i).call()\r\n                        .then(transportHash => {\r\n                            transportContract.methods.contractInfo(transportHash).call()\r\n                                .then(transport => {\r\n                                    setTransports(transports => transports.concat({\r\n                                        hash: transportHash,\r\n                                        nrTrees: transport[0],\r\n                                        car: transport[1],\r\n                                        cutHash: transport[2],\r\n                                        departureTime: transport[3]\r\n                                    }));\r\n                                });\r\n                        });\r\n                }\r\n                setContractsFetched(true);\r\n            });\r\n    };\r\n\r\n    const getAllTransports = () => {\r\n        cuts.forEach(cut => {\r\n            transportContract.methods.getCuttingContractTransportHashesCount(cut.hash).call()\r\n                .then(count => {\r\n                    for (let i = 0; i < count; i++) {\r\n                        transportContract.methods.cuttingContractTransportHashes(cut.hash, i).call()\r\n                            .then(transportHash => {\r\n                                transportContract.methods.contractInfo(transportHash).call()\r\n                                    .then(transport => {\r\n                                        setTransports(transports => transports.concat({\r\n                                            hash: transportHash,\r\n                                            nrTrees: transport[0],\r\n                                            car: transport[1],\r\n                                            cutHash: transport[2],\r\n                                            departureTime: transport[3]\r\n                                        }));\r\n                                    });\r\n                            });\r\n                    }\r\n                });\r\n        });\r\n        setContractsFetched(true);\r\n    }\r\n\r\n    return (\r\n        <div className={styles.content}>\r\n            <div className={styles.center}>\r\n                {cutterInfoFetched && <h2 className={styles.companyName}>{cutterInfo['name']}</h2>}\r\n            </div>\r\n\r\n            <div className={styles.descriptionContent}>\r\n\r\n                {\r\n                    cutterInfoFetched ?\r\n                        <CutterOverview cutterInfo={cutterInfo} />\r\n                        :\r\n                        <Loader size='lg' backdrop content=\"loading...\" vertical />\r\n                }\r\n\r\n            </div>\r\n\r\n            <div className={styles.transportsContent}>\r\n                <div className={styles.descriptionTitle}>Associated cutting contracts</div>\r\n                { isForester && <Button className={styles.addBtn} appearance='ghost' onClick={openCutModal}>+ Create cutting contract</Button> }\r\n                <Modal overflow={false} size='md' open={isCutModalOpen} onClose={closeCutModal}>\r\n                    <Modal.Header>\r\n                        <Modal.Title>Create cutting contract</Modal.Title>\r\n                    </Modal.Header>\r\n                    <Modal.Body>\r\n                        <CutForm closeFormModal={closeCutModal} reload={reloadCuts} givenCif={cif} openResultModal={openCutResultModal} />\r\n                    </Modal.Body>\r\n                    <Modal.Footer />\r\n                </Modal>\r\n\r\n                <Modal overflow={false} size='md' open={isCutResultModalOpen} onClose={closeCutResultModal}>\r\n                    <Modal.Header>\r\n                        <Modal.Title>Created cutting contract</Modal.Title>\r\n                    </Modal.Header>\r\n                    <Modal.Body>\r\n                        <QRCodeCanvas value={clientUrl + '/cut/' + resultHash} className={styles.resultHash} />\r\n                        <p>Contract hash: {resultHash}</p>\r\n                        <p><i>Please make sure to screenshot the QR code!</i></p>\r\n                    </Modal.Body>\r\n                    <Modal.Footer />\r\n                </Modal>\r\n\r\n                {\r\n                    contractsFetched ?\r\n                        <CutsList cuts={cuts} />\r\n                        :\r\n                        <Loader size='lg' backdrop content=\"loading...\" vertical />\r\n                }\r\n            </div>\r\n\r\n            <div className={styles.transportsContent}>\r\n                <div className={styles.descriptionTitle}>Associated transport contracts</div>\r\n                { isForester && <Button className={styles.addBtn} appearance='ghost' onClick={openTransportModal}>+ Create transport contract</Button> }\r\n                <Modal overflow={false} size='md' open={isTransportModalOpen} onClose={closeTransportModal}>\r\n                    <Modal.Header>\r\n                        <Modal.Title>Create transport contract</Modal.Title>\r\n                    </Modal.Header>\r\n                    <Modal.Body>\r\n                        <TransportForm closeModal={closeTransportModal} openResultModal={openTransportResultModal} reload={reloadTransports} givenCif={cif}\r\n                            givenCut='' givenCuts={\r\n                                cuts.map(cut => ({\r\n                                    label: cut.hash,\r\n                                    value: cut.hash\r\n                                }))\r\n                            } />\r\n                    </Modal.Body>\r\n                    <Modal.Footer />\r\n                </Modal>\r\n\r\n                <Modal overflow={false} size='md' open={isTransportResultModalOpen} onClose={closeTransportResultModal}>\r\n                    <Modal.Header>\r\n                        <Modal.Title>Created transport contract</Modal.Title>\r\n                    </Modal.Header>\r\n                    <Modal.Body>\r\n                        <QRCodeCanvas value={clientUrl + '/transport/' + resultHash} className={styles.resultHash} />\r\n                        <p>Contract hash: {resultHash}</p>\r\n                        <p><i>Please make sure to screenshot the QR code!</i></p>\r\n                    </Modal.Body>\r\n                    <Modal.Footer />\r\n                </Modal>\r\n\r\n                {\r\n                    contractsFetched ?\r\n                        <TransportsList transports={transports} />\r\n                        :\r\n                        <Loader size='lg' backdrop content=\"loading...\" vertical />\r\n                }\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CutterDescription","import CutsList from '../../components/lists/cuts/CutsList'\r\nimport styles from './CutterDashboard.module.css'\r\nimport { actorContract, cuttingContract, transportContract } from '../../web3';\r\nimport { useState, useEffect } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport { Loader } from 'rsuite';\r\nimport TransportsList from '../../components/lists/transports/TransportsList';\r\n\r\nconst CutterDashboard = () => {\r\n\r\n    const [cuts, setCuts] = useState([]);\r\n    const [transports, setTransports] = useState([]);\r\n\r\n    const [contractsFetched, setContractsFetched] = useState(false);\r\n\r\n    useEffect(() => {\r\n        getAssociatedContracts();\r\n    }, []);\r\n\r\n    let { address } = useParams();\r\n\r\n    const getAssociatedContracts = () => {\r\n        actorContract.methods.addressCompany(address).call()\r\n            .then(cifHex => {\r\n                cuttingContract.methods.getCompanyContractHashesCount(cifHex).call()\r\n                    .then(count => {\r\n                        for (let i = 0; i < count; i++) {\r\n                            cuttingContract.methods.companyContractHashes(cifHex, i).call()\r\n                                .then(contractHash => {\r\n                                    cuttingContract.methods.contractInfo(contractHash).call()\r\n                                        .then(contract => {\r\n                                            actorContract.methods.companyInfo(cifHex).call()\r\n                                                .then(info => {\r\n                                                    setCuts(cuts => cuts.concat({\r\n                                                        hash: contractHash,\r\n                                                        company: info.name,\r\n                                                        agreedNrTrees: contract[1],\r\n                                                        location: contract[2],\r\n                                                        startTime: contract[3],\r\n                                                        nrCutTrees: contract[4]\r\n                                                    }));\r\n                                                    getCutTransports(contractHash);\r\n                                                })\r\n                                        });\r\n                                });\r\n                        }\r\n                        if (count == 0) {\r\n                            setContractsFetched(true);\r\n                        }\r\n                    });\r\n            })\r\n            .catch(() => {\r\n                setContractsFetched(true);\r\n            });\r\n    };\r\n\r\n    const getCutTransports = (cutHash) => {\r\n        transportContract.methods.getCuttingContractTransportHashesCount(cutHash).call()\r\n            .then(count => {\r\n                for (let i = 0; i < count; i++) {\r\n                    transportContract.methods.cuttingContractTransportHashes(cutHash, i).call()\r\n                        .then(transportHash => {\r\n                            transportContract.methods.contractInfo(transportHash).call()\r\n                                .then(transport => {\r\n                                    setTransports(transports => transports.concat({\r\n                                        hash: transportHash,\r\n                                        nrTrees: transport[0],\r\n                                        car: transport[1],\r\n                                        cutHash: transport[2],\r\n                                        departureTime: transport[3]\r\n                                    }));\r\n                                });\r\n                        });\r\n                }\r\n                setContractsFetched(true);\r\n            });\r\n    };\r\n\r\n    return (\r\n        <div className={styles.content}>\r\n\r\n            <div className={styles.transportsContent}>\r\n                <div className={styles.descriptionTitle}>Cutting contracts</div>\r\n                {\r\n                    contractsFetched ?\r\n                        <CutsList cuts={cuts} />\r\n                        :\r\n                        <Loader size='lg' backdrop content=\"loading...\" vertical />\r\n                }\r\n            </div>\r\n\r\n            <div className={styles.transportsContent}>\r\n                <div className={styles.descriptionTitle}>Transport contracts</div>\r\n                {\r\n                    contractsFetched ?\r\n                        <TransportsList transports={transports} />\r\n                        :\r\n                        <Loader size='lg' backdrop content=\"loading...\" vertical />\r\n                }\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CutterDashboard","import styles from './Car.module.css';\r\nimport { useParams } from 'react-router-dom';\r\nimport web3, { actorContract, transportContract } from '../../web3'\r\nimport { useEffect, useState } from 'react';\r\nimport TransportsList from '../../components/lists/transports/TransportsList';\r\nimport { Button, Loader, Modal } from 'rsuite';\r\nimport TransportForm from '../../components/forms/TransportForm';\r\nimport { getAccount } from '../../components/header/MetamaskConnection/MetamaskConnection';\r\n\r\nconst Car = () => {\r\n\r\n    const [transports, setTransports] = useState([]);\r\n    const [transportsFetched, setTransportsFetched] = useState(false);\r\n\r\n    const [isModalOpen, setIsModalOpen] = useState(false);\r\n\r\n    const [isForester, setIsForester] = useState(false);\r\n\r\n    let { car } = useParams();\r\n    const carHex = web3.utils.asciiToHex(car);\r\n\r\n    useEffect(() => {\r\n        getTransports();\r\n        checkIfForester();\r\n    }, []);\r\n\r\n    const openModal = () => {\r\n        setIsModalOpen(true);\r\n    };\r\n    const closeModal = () => {\r\n        setIsModalOpen(false);\r\n    };\r\n\r\n    const reload = () => {\r\n        setTransportsFetched(false);\r\n        setTransports([]);\r\n        getTransports();\r\n    };\r\n\r\n    const checkIfForester = () => {\r\n        getAccount().then(account => {\r\n            actorContract.methods.foresters(account).call()\r\n            .then(resp => {\r\n                setIsForester(resp);\r\n            });\r\n        });\r\n    };\r\n\r\n    const getTransports = () => {\r\n        transportContract.methods.getCarTransportHashesCount(carHex).call()\r\n            .then(count => {\r\n                for (let i = 0; i < count; i++) {\r\n                    transportContract.methods.carTransports(carHex, i).call()\r\n                        .then(transportHash => {\r\n                            transportContract.methods.contractInfo(transportHash).call()\r\n                                .then(transport => {\r\n                                    setTransports(transports => transports.concat({\r\n                                        hash: transportHash,\r\n                                        nrTrees: transport[0],\r\n                                        car: transport[1],\r\n                                        cutHash: transport[2],\r\n                                        departureTime: transport[3]\r\n                                    }));\r\n                                });\r\n                        });\r\n                }\r\n                setTransportsFetched(true);\r\n            });\r\n    };\r\n\r\n    return (\r\n        <div className={styles.content}>\r\n            <div className={styles.center}>\r\n                <h2 className={styles.carNumberPlate}>{car}</h2>\r\n            </div>\r\n\r\n            <div className={styles.transportsContent}>\r\n                <div className={styles.descriptionTitle}>Associated transport contracts</div>\r\n                \r\n                { isForester && <Button className={styles.addBtn} appearance='ghost' onClick={openModal}>+ Create transport contract</Button> }\r\n                <Modal overflow={false} size='md' open={isModalOpen} onClose={closeModal}>\r\n                    <Modal.Header>\r\n                        <Modal.Title>Create transport contract</Modal.Title>\r\n                    </Modal.Header>\r\n                    <Modal.Body>\r\n                        <TransportForm closeModal={closeModal} reload={reload} givenCif=''\r\n                            givenCuts={[]} givenCar={car} givenCut=''/>\r\n                    </Modal.Body>\r\n                    <Modal.Footer />\r\n                </Modal>\r\n\r\n                {\r\n                    transportsFetched ?\r\n                        <TransportsList transports={transports} />\r\n                        :\r\n                        <Loader size='lg' backdrop content=\"loading...\" vertical />\r\n                }\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Car","import styles from './NotFound.module.css';\r\n\r\nconst NotFound = () => {\r\n    return (\r\n        <div className={styles.content}>\r\n            <div className={styles.center}>\r\n                <h1>Page not found</h1>\r\n                <h3>You got lost in the forest...</h3>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default NotFound","import 'rsuite/styles/index.less';\r\nimport './index.css';\r\nimport { BrowserRouter, Route, Routes } from \"react-router-dom\";\r\nimport Header from \"./components/header/Header\";\r\nimport Transports from \"./pages/transports/Transports\";\r\nimport Cuts from \"./pages/cuts/Cuts\";\r\nimport Cutters from \"./pages/cutters/Cutters\";\r\nimport Home from \"./pages/home/Home\";\r\nimport { CustomProvider, Footer } from 'rsuite';\r\nimport CutDescription from './pages/cut-description/CutDescription';\r\nimport TransportDescription from './pages/transport-description/TransportDescription';\r\nimport CutterDescription from './pages/cutter-description/CutterDescription';\r\nimport CutterDashboard from './pages/cutter-dashboard/CutterDashboard';\r\nimport Car from './pages/car/Car';\r\nimport NotFound from './pages/not-found/NotFound';\r\n\r\nconst App = () => {\r\n    return (\r\n        <CustomProvider theme=\"dark\">\r\n            <BrowserRouter basename='/tree-buddy'>\r\n                <Header />\r\n\r\n                <Routes>\r\n                    <Route path='/' element={<Home />} />\r\n                    <Route path='/transports' element={<Transports />} />\r\n                    <Route path='/cuts' element={<Cuts />} />\r\n                    <Route path='/cutters' element={<Cutters />} />\r\n\r\n                    <Route path='/transport/:hash' element={<TransportDescription />} />\r\n                    <Route path='/cut/:hash' element={<CutDescription />} />\r\n                    <Route path='/cutter/:cif' element={<CutterDescription />} />\r\n\r\n                    <Route path='/car/:car' element={<Car />} />\r\n\r\n                    <Route path='/dashboard/:address' element={<CutterDashboard />} />\r\n\r\n                    <Route path=\"/notfound\" element={<NotFound />} />\r\n                </Routes>\r\n\r\n                <Footer style={{ 'backgroundColor': '#1a1d24' }}>\r\n                    <p style={{ 'textAlign': 'center', 'paddingTop': '10px' }}>© Erik Halmai 2022</p>\r\n                    <p style={{ 'textAlign': 'center', 'paddingBottom': '10px', 'margin': '0px' }}>Build v1.0</p>\r\n                </Footer>\r\n            </BrowserRouter>\r\n        </CustomProvider>\r\n    )\r\n}\r\n\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"panel\":\"CutterOverview_panel__2IpHi\",\"addressRow\":\"CutterOverview_addressRow__2WNYQ\",\"descriptionRow\":\"CutterOverview_descriptionRow__3FElq\",\"infoRow\":\"CutterOverview_infoRow__268Tl\",\"slimText\":\"CutterOverview_slimText__2btwR\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"content\":\"TransportDescription_content__14tEd\",\"qrcode\":\"TransportDescription_qrcode__D1KIV\",\"cutBtn\":\"TransportDescription_cutBtn__3kCNG\",\"center\":\"TransportDescription_center__3w5_6\",\"descriptionContent\":\"TransportDescription_descriptionContent__1RqAW\",\"descriptionTitle\":\"TransportDescription_descriptionTitle__2aqe0\",\"titleText\":\"TransportDescription_titleText__3bTah\",\"transportsContent\":\"TransportDescription_transportsContent__2YuHV\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"content\":\"Car_content__3Agv-\",\"center\":\"Car_center__2S3bF\",\"carNumberPlate\":\"Car_carNumberPlate__2_RN5\",\"addBtn\":\"Car_addBtn__2tlVq\",\"descriptionTitle\":\"Car_descriptionTitle__1k33X\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"content\":\"Transports_content__1a_TK\",\"addButton\":\"Transports_addButton__2OXgG\",\"search\":\"Transports_search__1LD1W\",\"pageTitle\":\"Transports_pageTitle__2B0rQ\",\"resultHash\":\"Transports_resultHash__3dnjx\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"content\":\"Cuts_content__2KEWf\",\"addButton\":\"Cuts_addButton__1PUk4\",\"search\":\"Cuts_search__2BCvN\",\"resultHash\":\"Cuts_resultHash__17XBz\",\"tip\":\"Cuts_tip__113SR\",\"pageTitle\":\"Cuts_pageTitle__2C1sK\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"content\":\"CutterDashboard_content__kBcgV\",\"transportsContent\":\"CutterDashboard_transportsContent__18Swh\",\"descriptionTitle\":\"CutterDashboard_descriptionTitle__1C_uE\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"content\":\"Cutters_content__3MkD9\",\"addButton\":\"Cutters_addButton__3-E91\",\"search\":\"Cutters_search__1hqZv\",\"pageTitle\":\"Cutters_pageTitle__3ribw\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"content\":\"Home_content__2QLYN\",\"center\":\"Home_center__3bGXA\",\"search\":\"Home_search__2MNwS\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wallet\":\"Header_wallet__3MDvB\",\"addForesterBtn\":\"Header_addForesterBtn__1vNbT\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"icon\":\"MetamaskConnection_icon__o3xlQ\",\"btn\":\"MetamaskConnection_btn__clyFL\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"content\":\"NotFound_content__2nqYU\",\"center\":\"NotFound_center__IeP1D\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"CutsList_list__12OJY\",\"listItem\":\"CutsList_listItem__3mrDS\",\"centerList\":\"CutsList_centerList__3HCJj\",\"titleText\":\"CutsList_titleText__37jNZ\",\"slimText\":\"CutsList_slimText__ng4m0\",\"dataText\":\"CutsList_dataText__3thPn\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"TransportsList_list__VdpCH\",\"listItem\":\"TransportsList_listItem__16iIw\",\"centerList\":\"TransportsList_centerList__8bcbA\",\"titleText\":\"TransportsList_titleText__2R8Ul\",\"slimText\":\"TransportsList_slimText__1id1O\",\"dataText\":\"TransportsList_dataText__3Nqjg\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"CuttersList_list__1QZpe\",\"listItem\":\"CuttersList_listItem__paV_j\",\"center\":\"CuttersList_center__1SRsk\",\"titleText\":\"CuttersList_titleText__1TKAO\",\"slimText\":\"CuttersList_slimText__1JV3B\",\"dataText\":\"CuttersList_dataText__35fGJ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"panel\":\"TransportOverview_panel__2P85V\",\"addressRow\":\"TransportOverview_addressRow__1absr\",\"descriptionRow\":\"TransportOverview_descriptionRow__uRDsC\",\"infoRow\":\"TransportOverview_infoRow__GWTK0\",\"slimText\":\"TransportOverview_slimText__1ZVcr\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"content\":\"CutterDescription_content__TTjqL\",\"center\":\"CutterDescription_center__1iqAl\",\"companyName\":\"CutterDescription_companyName__aUy5k\",\"addBtn\":\"CutterDescription_addBtn__1kBYl\",\"descriptionContent\":\"CutterDescription_descriptionContent__3Zxs4\",\"descriptionTitle\":\"CutterDescription_descriptionTitle__1y9oG\",\"titleText\":\"CutterDescription_titleText__17Jo6\",\"transportsContent\":\"CutterDescription_transportsContent__7NVMB\",\"resultHash\":\"CutterDescription_resultHash__3wo_b\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"panel\":\"CutOverview_panel__vkrrT\",\"addressRow\":\"CutOverview_addressRow__1NgN4\",\"descriptionRow\":\"CutOverview_descriptionRow__YynEp\",\"infoRow\":\"CutOverview_infoRow__2v0fy\",\"slimText\":\"CutOverview_slimText__88gLv\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"content\":\"CutDescription_content__OF6iL\",\"qrcode\":\"CutDescription_qrcode__nWiwI\",\"cutBtn\":\"CutDescription_cutBtn__jSttu\",\"center\":\"CutDescription_center__cWXbu\",\"addBtn\":\"CutDescription_addBtn__2g2KN\",\"descriptionContent\":\"CutDescription_descriptionContent__Ethyb\",\"descriptionTitle\":\"CutDescription_descriptionTitle__2q1Kp\",\"titleText\":\"CutDescription_titleText__t8wkn\",\"transportsContent\":\"CutDescription_transportsContent__CgAl2\",\"resultHash\":\"CutDescription_resultHash__3_Vs_\"};"],"sourceRoot":""}